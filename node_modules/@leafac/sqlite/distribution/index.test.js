"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const _1 = require(".");
globals_1.describe("sql", () => {
    globals_1.test("No interpolation", () => {
        globals_1.expect(_1.sql `CREATE TABLE "users" ("id" INTEGER PRIMARY KEY AUTOINCREMENT, "name" TEXT)`).toMatchInlineSnapshot(`
      Object {
        "parameters": Array [],
        "source": "CREATE TABLE \\"users\\" (\\"id\\" INTEGER PRIMARY KEY AUTOINCREMENT, \\"name\\" TEXT)",
      }
    `);
    });
    globals_1.test("Interpolation", () => {
        globals_1.expect(_1.sql `INSERT INTO "users" ("name") VALUES (${"Leandro Facchinetti"})`)
            .toMatchInlineSnapshot(`
      Object {
        "parameters": Array [
          "Leandro Facchinetti",
        ],
        "source": "INSERT INTO \\"users\\" (\\"name\\") VALUES (?)",
      }
    `);
    });
    globals_1.test("Raw interpolation", () => {
        globals_1.expect(_1.sql `SELECT * FROM "users" WHERE name = ${"Leandro Facchinetti"}$${_1.sql ` AND "age" = ${30}`}`).toMatchInlineSnapshot(`
      Object {
        "parameters": Array [
          "Leandro Facchinetti",
          30,
        ],
        "source": "SELECT * FROM \\"users\\" WHERE name = ? AND \\"age\\" = ?",
      }
    `);
        globals_1.expect(() => {
            _1.sql `SELECT * FROM "users" WHERE name = ${"Leandro Facchinetti"}$${` AND "age" = ${30}`}`;
        }).toThrowErrorMatchingInlineSnapshot(`"Failed to interpolate raw query ‘ AND \\"age\\" = 30’ because it wasn’t created with the sql tagged template literal"`);
    });
});
globals_1.describe("Database", () => {
    globals_1.test("run()", () => {
        const database = new _1.Database(":memory:");
        database.execute(_1.sql `CREATE TABLE "users" ("id" INTEGER PRIMARY KEY AUTOINCREMENT, "name" TEXT);`);
        globals_1.expect(database.run(_1.sql `INSERT INTO "users" ("name") VALUES (${"Leandro Facchinetti"})`)).toMatchInlineSnapshot(`
      Object {
        "changes": 1,
        "lastInsertRowid": 1,
      }
    `);
        database.close();
    });
    globals_1.test("get()", () => {
        const database = new _1.Database(":memory:");
        database.execute(_1.sql `CREATE TABLE "users" ("id" INTEGER PRIMARY KEY AUTOINCREMENT, "name" TEXT);`);
        database.run(_1.sql `INSERT INTO "users" ("name") VALUES (${"Leandro Facchinetti"})`);
        globals_1.expect(database.get(_1.sql `SELECT * from "users"`))
            .toMatchInlineSnapshot(`
      Object {
        "id": 1,
        "name": "Leandro Facchinetti",
      }
    `);
        database.close();
    });
    globals_1.test("all()", () => {
        const database = new _1.Database(":memory:");
        database.execute(_1.sql `CREATE TABLE "users" ("id" INTEGER PRIMARY KEY AUTOINCREMENT, "name" TEXT);`);
        database.run(_1.sql `INSERT INTO "users" ("name") VALUES (${"Leandro Facchinetti"}), (${"Linda Renner"})`);
        globals_1.expect(database.all(_1.sql `SELECT * from "users"`))
            .toMatchInlineSnapshot(`
      Array [
        Object {
          "id": 1,
          "name": "Leandro Facchinetti",
        },
        Object {
          "id": 2,
          "name": "Linda Renner",
        },
      ]
    `);
        database.close();
    });
    globals_1.test("iterate()", () => {
        const database = new _1.Database(":memory:");
        database.execute(_1.sql `CREATE TABLE "users" ("id" INTEGER PRIMARY KEY AUTOINCREMENT, "name" TEXT);`);
        database.run(_1.sql `INSERT INTO "users" ("name") VALUES (${"Leandro Facchinetti"}), (${"Linda Renner"})`);
        globals_1.expect([...database.iterate(_1.sql `SELECT * from "users"`)])
            .toMatchInlineSnapshot(`
      Array [
        Object {
          "id": 1,
          "name": "Leandro Facchinetti",
        },
        Object {
          "id": 2,
          "name": "Linda Renner",
        },
      ]
    `);
        database.close();
    });
    globals_1.test("execute()", () => {
        const database = new _1.Database(":memory:");
        globals_1.expect(() => {
            database.execute(_1.sql `INSERT INTO "users" ("name") VALUES (${"Leandro Facchinetti"})`);
        }).toThrowErrorMatchingInlineSnapshot(`
      "Failed to execute({
        \\"source\\": \\"INSERT INTO \\\\\\"users\\\\\\" (\\\\\\"name\\\\\\") VALUES (?)\\",
        \\"parameters\\": [
          \\"Leandro Facchinetti\\"
        ]
      }) because execute() doesn’t support queries with parameters"
    `);
        database.close();
    });
    globals_1.test("executeTransaction()", () => {
        const database = new _1.Database(":memory:");
        database.execute(_1.sql `CREATE TABLE "users" ("id" INTEGER PRIMARY KEY AUTOINCREMENT, "name" TEXT);`);
        globals_1.expect(() => {
            database.executeTransaction(() => {
                database.run(_1.sql `INSERT INTO "users" ("name") VALUES (${"Leandro Facchinetti"})`);
                throw new Error("Rollback");
            });
        }).toThrowErrorMatchingInlineSnapshot(`"Rollback"`);
        globals_1.expect(database.all(_1.sql `SELECT * from "users"`)).toMatchInlineSnapshot(`Array []`);
        globals_1.expect(database.executeTransaction(() => {
            return database.run(_1.sql `INSERT INTO "users" ("name") VALUES (${"Leandro Facchinetti"})`);
        })).toMatchInlineSnapshot(`
      Object {
        "changes": 1,
        "lastInsertRowid": 1,
      }
    `);
        globals_1.expect(database.all(_1.sql `SELECT * from "users"`))
            .toMatchInlineSnapshot(`
      Array [
        Object {
          "id": 1,
          "name": "Leandro Facchinetti",
        },
      ]
    `);
        database.close();
    });
    globals_1.test("executeTransactionImmediate()", () => {
        const database = new _1.Database(":memory:");
        database.execute(_1.sql `CREATE TABLE "users" ("id" INTEGER PRIMARY KEY AUTOINCREMENT, "name" TEXT);`);
        globals_1.expect(() => {
            database.executeTransactionImmediate(() => {
                database.run(_1.sql `INSERT INTO "users" ("name") VALUES (${"Leandro Facchinetti"})`);
                throw new Error("Rollback");
            });
        }).toThrowErrorMatchingInlineSnapshot(`"Rollback"`);
        globals_1.expect(database.all(_1.sql `SELECT * from "users"`)).toMatchInlineSnapshot(`Array []`);
        globals_1.expect(database.executeTransactionImmediate(() => {
            return database.run(_1.sql `INSERT INTO "users" ("name") VALUES (${"Leandro Facchinetti"})`);
        })).toMatchInlineSnapshot(`
      Object {
        "changes": 1,
        "lastInsertRowid": 1,
      }
    `);
        globals_1.expect(database.all(_1.sql `SELECT * from "users"`))
            .toMatchInlineSnapshot(`
      Array [
        Object {
          "id": 1,
          "name": "Leandro Facchinetti",
        },
      ]
    `);
        database.close();
    });
    globals_1.test("executeTransactionExclusive()", () => {
        const database = new _1.Database(":memory:");
        database.execute(_1.sql `CREATE TABLE "users" ("id" INTEGER PRIMARY KEY AUTOINCREMENT, "name" TEXT);`);
        globals_1.expect(() => {
            database.executeTransactionExclusive(() => {
                database.run(_1.sql `INSERT INTO "users" ("name") VALUES (${"Leandro Facchinetti"})`);
                throw new Error("Rollback");
            });
        }).toThrowErrorMatchingInlineSnapshot(`"Rollback"`);
        globals_1.expect(database.all(_1.sql `SELECT * from "users"`)).toMatchInlineSnapshot(`Array []`);
        globals_1.expect(database.executeTransactionExclusive(() => {
            return database.run(_1.sql `INSERT INTO "users" ("name") VALUES (${"Leandro Facchinetti"})`);
        })).toMatchInlineSnapshot(`
      Object {
        "changes": 1,
        "lastInsertRowid": 1,
      }
    `);
        globals_1.expect(database.all(_1.sql `SELECT * from "users"`))
            .toMatchInlineSnapshot(`
      Array [
        Object {
          "id": 1,
          "name": "Leandro Facchinetti",
        },
      ]
    `);
        database.close();
    });
    globals_1.test("migrate()", () => {
        const database = new _1.Database(":memory:");
        let counter = 0;
        database.migrate(_1.sql `CREATE TABLE "users" ("id" INTEGER PRIMARY KEY AUTOINCREMENT, "name" TEXT);`, () => {
            counter++;
        });
        globals_1.expect(counter).toEqual(1);
        database.migrate(_1.sql `CREATE TABLE "users" ("id" INTEGER PRIMARY KEY AUTOINCREMENT, "name" TEXT);`, () => {
            counter++;
        });
        globals_1.expect(counter).toEqual(1);
        database.migrate(_1.sql `CREATE TABLE "users" ("id" INTEGER PRIMARY KEY AUTOINCREMENT, "name" TEXT);`, () => {
            counter++;
        }, () => {
            counter++;
        });
        globals_1.expect(counter).toEqual(2);
        globals_1.expect(() => {
            database.migrate(_1.sql `CREATE TABLE "users" ("id" INTEGER PRIMARY KEY AUTOINCREMENT, "name" TEXT);`, () => {
                counter++;
            }, () => {
                counter++;
            }, (database) => {
                database.run(_1.sql `INSERT INTO "users" ("name") VALUES (${"Leandro Facchinetti"})`);
            }, () => {
                throw new Error("Should rollback");
            });
        }).toThrowErrorMatchingInlineSnapshot(`"Should rollback"`);
        globals_1.expect(database.all(_1.sql `SELECT * from "users"`)).toMatchInlineSnapshot(`Array []`);
        database.migrate(_1.sql `CREATE TABLE "users" ("id" INTEGER PRIMARY KEY AUTOINCREMENT, "name" TEXT);`, () => {
            counter++;
        }, () => {
            counter++;
        }, (database) => {
            database.run(_1.sql `INSERT INTO "users" ("name") VALUES (${"Leandro Facchinetti"})`);
        });
        globals_1.expect(database.all(_1.sql `SELECT * from "users"`))
            .toMatchInlineSnapshot(`
      Array [
        Object {
          "id": 1,
          "name": "Leandro Facchinetti",
        },
      ]
    `);
        database.close();
    });
    globals_1.test("safeIntegers", () => {
        const database = new _1.Database(":memory:");
        database.execute(_1.sql `CREATE TABLE "users" ("id" INTEGER PRIMARY KEY AUTOINCREMENT, "name" TEXT);`);
        globals_1.expect(database.run(_1.sql `INSERT INTO "users" ("name") VALUES (${"Leandro Facchinetti"})`)).toMatchInlineSnapshot(`
      Object {
        "changes": 1,
        "lastInsertRowid": 1,
      }
    `);
        globals_1.expect(database.run(_1.sql `INSERT INTO "users" ("name") VALUES (${"Linda Renner"})`, { safeIntegers: true })).toMatchInlineSnapshot(`
      Object {
        "changes": 1,
        "lastInsertRowid": 2n,
      }
    `);
        globals_1.expect(database.run(_1.sql `INSERT INTO "users" ("name") VALUES (${"Louie Renner"})`)).toMatchInlineSnapshot(`
      Object {
        "changes": 1,
        "lastInsertRowid": 3n,
      }
    `);
        globals_1.expect(database.run(_1.sql `INSERT INTO "users" ("name") VALUES (${"Cadeau Renner"})`, { safeIntegers: false })).toMatchInlineSnapshot(`
      Object {
        "changes": 1,
        "lastInsertRowid": 4,
      }
    `);
        globals_1.expect(database.get(_1.sql `SELECT * from "users"`, {
            safeIntegers: true,
        })).toMatchInlineSnapshot(`
      Object {
        "id": 1n,
        "name": "Leandro Facchinetti",
      }
    `);
        globals_1.expect(database.all(_1.sql `SELECT * from "users"`, {
            safeIntegers: true,
        })).toMatchInlineSnapshot(`
      Array [
        Object {
          "id": 1n,
          "name": "Leandro Facchinetti",
        },
        Object {
          "id": 2n,
          "name": "Linda Renner",
        },
        Object {
          "id": 3n,
          "name": "Louie Renner",
        },
        Object {
          "id": 4n,
          "name": "Cadeau Renner",
        },
      ]
    `);
        globals_1.expect([
            ...database.iterate(_1.sql `SELECT * from "users"`, {
                safeIntegers: true,
            }),
        ]).toMatchInlineSnapshot(`
      Array [
        Object {
          "id": 1n,
          "name": "Leandro Facchinetti",
        },
        Object {
          "id": 2n,
          "name": "Linda Renner",
        },
        Object {
          "id": 3n,
          "name": "Louie Renner",
        },
        Object {
          "id": 4n,
          "name": "Cadeau Renner",
        },
      ]
    `);
        database.close();
    });
});
//# sourceMappingURL=index.test.js.map